name: Daily Permit Data Pull

on:
  # Run daily at 6 AM EST (11 AM UTC)
  schedule:
    - cron: '0 11 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      days_back:
        description: 'Number of days back to fetch permits'
        required: false
        default: '1'
        type: string
      max_records:
        description: 'Maximum records per county (for testing)'
        required: false
        default: ''
        type: string

jobs:
  pull-permits:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create necessary directories
      run: |
        mkdir -p data/raw
        mkdir -p data/processed
        mkdir -p data/cache
        mkdir -p data/chroma_db
        mkdir -p logs
    
    - name: Download existing data artifacts (if available)
      uses: actions/download-artifact@v3
      with:
        name: permit-data
        path: data/
      continue-on-error: true
    
    - name: Run permit pipeline
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
      run: |
        # Determine command line arguments
        DAYS_ARG="${{ github.event.inputs.days_back || '1' }}"
        MAX_RECORDS_ARG="${{ github.event.inputs.max_records }}"
        
        # Build command
        CMD="python main.py --days $DAYS_ARG"
        if [ ! -z "$MAX_RECORDS_ARG" ]; then
          CMD="$CMD --max-records $MAX_RECORDS_ARG"
        fi
        
        echo "Running: $CMD"
        $CMD
    
    - name: Upload pipeline logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pipeline-logs-${{ github.run_number }}
        path: logs/
        retention-days: 30
    
    - name: Upload processed data
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: permit-data
        path: |
          data/processed/
          data/cache/
          data/chroma_db/
        retention-days: 90
    
    - name: Generate summary report
      if: always()
      run: |
        echo "# 📊 Daily Permit Pull Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check if pipeline log exists
        if [ -f "logs/pipeline.log" ]; then
          TOTAL_PERMITS=$(grep -c "Successfully uploaded" logs/pipeline.log || echo "0")
          echo "**Total Permits Processed:** $TOTAL_PERMITS" >> $GITHUB_STEP_SUMMARY
          
          # Extract county breakdown from logs
          if grep -q "Miami-Dade" logs/pipeline.log; then
            MIAMI_COUNT=$(grep "Total Miami-Dade permits fetched:" logs/pipeline.log | tail -1 | grep -o '[0-9]\+' || echo "0")
            echo "**Miami-Dade Permits:** $MIAMI_COUNT" >> $GITHUB_STEP_SUMMARY
          fi
          
          if grep -q "Hillsborough" logs/pipeline.log; then
            HILLS_COUNT=$(grep "Fetched.*Hillsborough permits" logs/pipeline.log | tail -1 | grep -o '[0-9]\+' || echo "0")
            echo "**Hillsborough Permits:** $HILLS_COUNT" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Show recent log entries
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📝 Recent Log Entries" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -20 logs/pipeline.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        else
          echo "**Status:** ❌ Pipeline log not found" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "🚨 Pipeline failed! Check logs for details." >> $GITHUB_STEP_SUMMARY
        if [ -f "logs/pipeline.log" ]; then
          echo "## 🔍 Error Details" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          grep -i "error\|exception\|failed" logs/pipeline.log | tail -10 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
